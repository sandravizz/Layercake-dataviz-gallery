{
  "version": 3,
  "sources": ["../../do-not-zip/src/crc32.js", "../../do-not-zip/src/toArray.js", "../../do-not-zip/src/toBlob.js", "../../do-not-zip/src/toBuffer.js", "../../do-not-zip/src/toAuto.js"],
  "sourcesContent": ["const table = [];\nfor (let n = 0; n < 256; n++) {\n\tlet c = n;\n\tfor (let k = 0; k < 8; k++) {\n\t\tc = c & 1 ? 0xEDB88320 ^ (c >>> 1) : c >>> 1;\n\t}\n\ttable[n] = c;\n}\n\nexport default bytes => {\n\tlet sum = -1;\n\tfor (const byte of bytes) {\n\t\tsum = (sum >>> 8) ^ table[(sum ^ byte) & 0xFF];\n\t}\n\treturn sum ^ -1;\n};\n", "import crc32 from './crc32.js';\n\nconst int = (n, length) => {\n\tconst out = [];\n\twhile (length--) {\n\t\tout.push(n & 0xFF);\n\t\tn >>>= 8;\n\t}\n\treturn out;\n};\n\nconst toBytes = data => typeof data === 'string' ? [...data].map(char => char.charCodeAt(0)) : data;\n\nexport default files => {\n\tlet fileData = [];\n\tconst centralDirectory = [];\n\tfor (const { path, data } of files) {\n\t\tconst dataBytes = toBytes(data);\n\t\tconst pathBytes = toBytes(path);\n\t\tconst commonHeader = [0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, ...int(crc32(dataBytes), 4), ...int(dataBytes.length, 4), ...int(dataBytes.length, 4), ...int(pathBytes.length, 2), 0x00, 0x00];\n\t\tcentralDirectory.push(0x50, 0x4B, 0x01, 0x02, 0x14, 0x00, ...commonHeader, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, ...int(fileData.length, 4), ...pathBytes);\n\t\tfileData = [...fileData, 0x50, 0x4B, 0x03, 0x04, ...commonHeader, ...pathBytes, ...dataBytes];\n\t}\n\treturn [...fileData, ...centralDirectory, 0x50, 0x4B, 0x05, 0x06, 0x00, 0x00, 0x00, 0x00, ...int(files.length, 2), ...int(files.length, 2), ...int(centralDirectory.length, 4), ...int(fileData.length, 4), 0x00, 0x00];\n};\n", "import toArray from './toArray.js';\n\nexport default files => new Blob([Uint8Array.from(toArray(files))], { type: 'application/zip' });\n", "import toArray from './toArray.js';\n\nexport default files => Buffer.from(toArray(files));\n", "import toBlob from './toBlob.js';\nimport toBuffer from './toBuffer.js';\nexport default files => (typeof Blob === 'undefined' ? toBuffer : toBlob)(files);\n"],
  "mappings": ";;;AAAA,IAAM,QAAQ,CAAA;AACd,SAAS,IAAI,GAAG,IAAI,KAAK,KAAK;AAC7B,MAAI,IAAI;AACR,WAAS,IAAI,GAAG,IAAI,GAAG,KAAK;AAC3B,QAAI,IAAI,IAAI,aAAc,MAAM,IAAK,MAAM;;AAE5C,QAAM,CAAC,IAAI;;AAGZ,IAAA,QAAe,WAAS;AACvB,MAAI,MAAM;AACV,aAAW,QAAQ,OAAO;AACzB,UAAO,QAAQ,IAAK,OAAO,MAAM,QAAQ,GAAI;;AAE9C,SAAO,MAAM;;ACZd,IAAM,MAAM,CAAC,GAAG,WAAW;AAC1B,QAAM,MAAM,CAAA;AACZ,SAAO,UAAU;AAChB,QAAI,KAAK,IAAI,GAAI;AACjB,WAAO;;AAER,SAAO;;AAGR,IAAM,UAAU,UAAQ,OAAO,SAAS,WAAW,CAAC,GAAG,IAAI,EAAE,IAAI,UAAQ,KAAK,WAAW,CAAC,CAAC,IAAI;AAE/F,IAAA,UAAe,WAAS;AACvB,MAAI,WAAW,CAAA;AACf,QAAM,mBAAmB,CAAA;AACzB,aAAW,EAAE,MAAM,KAAI,KAAM,OAAO;AACnC,UAAM,YAAY,QAAQ,IAAI;AAC9B,UAAM,YAAY,QAAQ,IAAI;AAC9B,UAAM,eAAe,CAAC,IAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAG,IAAI,MAAM,SAAS,GAAG,CAAC,GAAG,GAAG,IAAI,UAAU,QAAQ,CAAC,GAAG,GAAG,IAAI,UAAU,QAAQ,CAAC,GAAG,GAAG,IAAI,UAAU,QAAQ,CAAC,GAAG,GAAM,CAAI;AAChN,qBAAiB,KAAK,IAAM,IAAM,GAAM,GAAM,IAAM,GAAM,GAAG,cAAc,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAG,IAAI,SAAS,QAAQ,CAAC,GAAG,GAAG,SAAS;AAC/K,eAAW,CAAC,GAAG,UAAU,IAAM,IAAM,GAAM,GAAM,GAAG,cAAc,GAAG,WAAW,GAAG,SAAS;;AAE7F,SAAO,CAAC,GAAG,UAAU,GAAG,kBAAkB,IAAM,IAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAM,GAAG,IAAI,MAAM,QAAQ,CAAC,GAAG,GAAG,IAAI,MAAM,QAAQ,CAAC,GAAG,GAAG,IAAI,iBAAiB,QAAQ,CAAC,GAAG,GAAG,IAAI,SAAS,QAAQ,CAAC,GAAG,GAAM,CAAI;;ACrBvN,IAAA,SAAe,WAAS,IAAI,KAAK,CAAC,WAAW,KAAK,QAAQ,KAAK,CAAC,CAAC,GAAG,EAAE,MAAM,kBAAiB,CAAE;ACA/F,IAAA,WAAe,WAAS,OAAO,KAAK,QAAQ,KAAK,CAAC;ACAlD,IAAA,SAAe,YAAU,OAAO,SAAS,cAAc,WAAW,QAAQ,KAAK;",
  "names": []
}
