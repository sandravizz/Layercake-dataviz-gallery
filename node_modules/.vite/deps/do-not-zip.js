import "./chunk-B4Q33VKO.js";

// node_modules/do-not-zip/dist/index.es.js
var table = [];
for (let n = 0; n < 256; n++) {
  let c = n;
  for (let k = 0; k < 8; k++) {
    c = c & 1 ? 3988292384 ^ c >>> 1 : c >>> 1;
  }
  table[n] = c;
}
var crc32 = (bytes) => {
  let sum = -1;
  for (const byte of bytes) {
    sum = sum >>> 8 ^ table[(sum ^ byte) & 255];
  }
  return sum ^ -1;
};
var int = (n, length) => {
  const out = [];
  while (length--) {
    out.push(n & 255);
    n >>>= 8;
  }
  return out;
};
var toBytes = (data) => typeof data === "string" ? [...data].map((char) => char.charCodeAt(0)) : data;
var toArray = (files) => {
  let fileData = [];
  const centralDirectory = [];
  for (const { path, data } of files) {
    const dataBytes = toBytes(data);
    const pathBytes = toBytes(path);
    const commonHeader = [10, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...int(crc32(dataBytes), 4), ...int(dataBytes.length, 4), ...int(dataBytes.length, 4), ...int(pathBytes.length, 2), 0, 0];
    centralDirectory.push(80, 75, 1, 2, 20, 0, ...commonHeader, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ...int(fileData.length, 4), ...pathBytes);
    fileData = [...fileData, 80, 75, 3, 4, ...commonHeader, ...pathBytes, ...dataBytes];
  }
  return [...fileData, ...centralDirectory, 80, 75, 5, 6, 0, 0, 0, 0, ...int(files.length, 2), ...int(files.length, 2), ...int(centralDirectory.length, 4), ...int(fileData.length, 4), 0, 0];
};
var toBlob = (files) => new Blob([Uint8Array.from(toArray(files))], { type: "application/zip" });
var toBuffer = (files) => Buffer.from(toArray(files));
var toAuto = (files) => (typeof Blob === "undefined" ? toBuffer : toBlob)(files);
export {
  toArray,
  toAuto,
  toBlob,
  toBuffer
};
//# sourceMappingURL=do-not-zip.js.map
